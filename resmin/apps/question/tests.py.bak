from django.test import TestCase
from django.test.client import Client
from django.contrib.auth.models import User
from apps.question.models import Question, Answer
from django.conf import settings


cl = Client()

class BaseTestCase(TestCase):
    def _create_user(self, username, password):
        return User.objects.create_user(username, username, password)

    def _login(self, username, password):
        response = cl.post('/login/',
            {'username': username,
             'password': password})
        self.assertEqual(response.content.find('errorlist'), -1)
        return response

    def _logout(self):
        return cl.get('/logout/')

    def _create_question(self, text, is_anonymouse=False, is_nsfw=False):
        response = cl.post('/q/',
            {'text': text,
             'is_anonymouse': is_anonymouse,
             'is_nsfw': is_nsfw})
        self.assertEqual(response.content.find('errorlist'), -1)
        return response

    def _answer_question(
        self, qid, visible_for, img_path=settings.TEST_IMG_PATH,
        visible_for_users=[], is_anonymouse=False, is_nsfw=False):
        question = Question.objects.get(id=qid)
        response = cl.post(question.get_absolute_url(),
            {'visible_for': visible_for,
             'visible_for_users': visible_for_users,
             'is_anonymouse': is_anonymouse,
             'is_nsfw': is_nsfw,
             'image': open(img_path, 'r')})
        return response

    def _delete_answer(self, answer):
        return cl.post(answer.get_absolute_url(),
            {'delete': 'delete'})

class QuestionAnswerTest(BaseTestCase):
    def setUp(self):
        self.user1 = self._create_user("user1", "123456")
        self.user2 = self._create_user("user2", "123456")

    def testSubmitQuestion(self):
        # Login with user1
        self._login("user1", "123456")

        # Create a question with test1
        response = self._create_question("test1")

        # If successfully created it must be redirected to /q/B/
        self.assertEqual(response._headers['location'][1], 'http://testserver/q/B/')

        # Get created question
        created_question = Question.objects.all()[0]

        # This question is_anonymouse must be False
        self.assertEqual(created_question.is_anonymouse, False)

    def testAnswerQuestion(self):
        # Login with user1
        self._login("user1", "123456")

        # Create a question with test1
        self._create_question("test1")

        # Get question with text test1
        question = Question.objects.get(text="test1")

        # Get response from posting answer
        response = self._answer_question(question.id, visible_for=0)

        # If successfully created it must be redirected to /a/B/
        self.assertEqual(response._headers['location'][1], 'http://testserver/a/B/')

        # Get answer
        answer = Answer.objects.all()[0]

        # Delete answer
        response = self._delete_answer(answer)

        # If successfully deleted, must be redirected to /
        self.assertEqual(response._headers['location'][1], 'http://testserver/')

        # There must be 1 answer marked as deleted
        self.assertEqual(Answer.objects.filter(status=1).count(), 1)


    def testAnswerVisibilityPublic(self):
        # Login with user1
        self._login("user1", "123456")

        # Create a question with test1
        self._create_question("test1")

        # Get question with text test1
        question = Question.objects.get(text="test1")

        # Get response from posting answer
        response = self._answer_question(question.id, visible_for=0)

        # If successfully created it must be redirected to /a/B/
        self.assertEqual(response._headers['location'][1], 'http://testserver/a/B/')

        # Get homepage
        response = cl.get('/')

        # There must be 1 answer at homepage
        self.assertEqual(len(response.context['answers']), 1)

        self._logout()

        # Get homepage
        response = cl.get('/')

        # There must be 1 answer at homepage
        self.assertEqual(len(response.context['answers']), 1)


    def testAnswerVisibilityForFollowings(self):
        from apps.follow.models import UserFollow

        # Login with user1
        self._login("user1", "123456")

        # Create a question with test1
        self._create_question("test1")

        # Get question with text test1
        question = Question.objects.get(text="test1")

        # Post an answer to that question
        self._answer_question(question.id, visible_for=1)

        # Get homepage
        response = cl.get('/')

        # There must be no answers at homepage
        self.assertEqual(len(response.context['answers']), 0)

        # Logout from user1
        self._logout()

        self._login("user2", "123456")

        # Follow user2 with user1
        UserFollow.objects.create(
            follower=self.user2, target=self.user1, status=1)

        # Get answers from followings
        response = cl.get('/?filter=followings')

        # There must be 1 answer at homepage
        self.assertEqual(len(response.context['answers']), 1)


    def testAnswerVisibilityForDirect(self):
        from apps.follow.models import UserFollow

        # Login with user1
        self._login("user1", "123456")

        # Create a question with test1
        self._create_question("test1")

        # Get question with text test1
        question = Question.objects.get(text="test1")

        # Follow user2 with user1
        UserFollow.objects.create(
            follower=self.user2, target=self.user1, status=1)

        # Post an answer to that question
        response = self._answer_question(
            question.id, visible_for=2, visible_for_users=[self.user2.id])

        # If successfully created it must be redirected to /a/B/
        self.assertEqual(response._headers['location'][1], 'http://testserver/a/B/')

        # Get answer at database
        answer = Answer.objects.all()[0]

        # Answer should have 1 visible_for_user
        self.assertEqual(len(answer.visible_for_users.all()), 1)

        # There must be no answers at homepage
        response = cl.get('/')
        self.assertEqual(len(response.context['answers']), 0)

        # Logout from user1
        self._logout()

        # Login with user2 and make user2 following user1
        self._login("user2", "123456")

        # There must be no answers at homepage
        response = cl.get('/')
        self.assertEqual(len(response.context['answers']), 0)

        # There must be no answers at from followings page
        response = cl.get('/?filter=followings')
        self.assertEqual(len(response.context['answers']), 0)

        # There must be 1 answer at direct answers page
        response = cl.get('/?filter=direct')
        self.assertEqual(len(response.context['answers']), 1)

    def testAnswerVisibilityAtQuestionPage(self):
        # Login with user1
        self._login("user1", "123456")

        # Create a question called test1
        self._create_question("test1")

        #Create a question called test2
